name: 'build'

on:
  push:
    branches:
      - 8.x
    tags:
      - '*'
  pull_request:
      branches:
        - 8.x

jobs:
  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.19' # The Go version to download (if necessary) and use.
    # Run build of the application
    - name: Run build
      run: go build
    # Run vet & lint on the code
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
    - name: Run Elasticsearch
      run: |
        set -e
        docker-compose up &
        until $(curl --output /dev/null --silent --head --fail -u elastic:changeme http://localhost:9200); do echo "wait elastic" && sleep 5; done
        curl -XPOST -u elastic:changeme http://localhost:9200/_license/start_trial?acknowledge=true
        curl -s -X POST -u "elastic:changeme" -H "Content-Type: application/json" http://localhost:9200/_security/user/kibana_system/_password -d "{\"password\":\"changeme\"}"
        until $(curl --output /dev/null --silent --head --fail -u elastic:changeme http://localhost:5601); do echo "wait kibana" && sleep 5; done
        curl --fail -u elastic:changeme -H "Content-Type: application/json" -XPUT http://localhost:9200/logs -d '{"settings": {"number_of_replicas": 0, "number_of_shards": 1}}'
        curl --fail -u elastic:changeme -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/logs/_bulk?pretty --data-binary @fixtures/logs/bulk.ndjson
        curl --fail -XGET -u elastic:changeme "http://localhost:9200/_cluster/health?wait_for_status=green&timeout=500s"
    - name: Run test
      run: make test
    - uses: codecov/codecov-action@v2
      with:
        files: coverage.txt
        flags: unittests
        fail_ci_if_error: true

  release:
    needs: [build] # Only run this workflow when "build" workflow succeeds
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'
      - name: Inject version on CLI
        run:  sed -i "s/app.Version = \"develop\"/app.Version = \"${GITHUB_REF##*/}\"/" main.go
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  release_docker_image:
    needs: [build] # Only run this workflow when "build" workflow succeeds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses:  docker/setup-buildx-action@v1
        with:
          version: "v0.5.1"
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            quay.io/webcenter/elktools
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            version=${{env.GITHUB_REF##*/}}
            commit=${{env.GITHUB_SHA::8}}
            test=${{version}}